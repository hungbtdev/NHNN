@{
    var controllerName = ViewContext.RouteData.Values["controller"].ToString();
    var areaName = ViewContext.RouteData.Values["area"].ToString();
}

@await Component.InvokeAsync("FormTitle")

@(Html.DevExtreme().DataGrid<CoreUploadFileDTO>().DataSource(d => d.Mvc()
        .Controller(controllerName)
        .Area(areaName)
        .LoadAction("Get")
        .DeleteAction("Delete")
        .UpdateAction("Update")
        .Key("Id")).ToDefaultOption()
        .Editing(e => e.UseIcons(true).Mode(GridEditMode.Cell).AllowDeleting(true).AllowUpdating(true))
        .Columns(column =>
        {
            column.Add().Width(100).DataField("Id").Caption(Resources.Image).CellTemplate(@<text>
<img class="galery-img" width="80" height="80" src="@Url.Action("Image")/<%- value %>" />
</text>).AllowExporting(false);
            column.AddFor(c => c.Code).MinWidth(150).AllowEditing(false);
            column.AddFor(c => c.Name).MinWidth(150);
            column.AddFor(c => c.Description).MinWidth(150);
            column.AddFor(c => c.Created).AllowEditing(false).Format(Vinorsoft.Core.CoreConstants.DateTimeFormat).MinWidth(150);
            column.AddFor(c => c.CreatedBy).MinWidth(150).AllowEditing(false);
            //column.AddFor(c => c.FileExtension).MinWidth(150);
            //colums.AddFor(c => c.MimeType).MinWidth(150);
            //colums.AddFor(c => c.Link).MinWidth(150);
            //colums.AddFor(c => c.RefId).MinWidth(150);
        })
            .OnToolbarPreparing("toolbar_preparing")
)
<script>
    function toolbar_preparing(e) {
        var dataGrid = e.component;
        e.toolbarOptions.items.unshift({
            location: "after",
            widget: "dxButton",
            options: {
                icon: "plus",
                onClick: function () {
                    window.location.href = '@Url.Action("GaleryItem")'
                }
            }
        })
    }
</script>

